import { NextRequest, NextResponse } from 'next/server';
import puppeteer from 'puppeteer';

export async function POST(request: NextRequest) {
  try {
    const { data, filename } = await request.json();
    
    if (!data) {
      return NextResponse.json(
        { error: 'Missing data parameter' },
        { status: 400 }
      );
    }
    
    // Launch a headless browser
    const browser = await puppeteer.launch({ headless: 'new' });
    const page = await browser.newPage();
    
    // Generate HTML content based on the data
    const htmlContent = generateHtml(data, filename);
    
    // Set the HTML content
    await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
    
    // Generate PDF
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '1cm',
        right: '1cm',
        bottom: '1cm',
        left: '1cm'
      }
    });
    
    // Close the browser
    await browser.close();
    
    // Return the PDF as a response
    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename || 'export'}.pdf"`
      }
    });
  } catch (error) {
    console.error('Error generating PDF:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
}

// Helper function to generate HTML content for the PDF
function generateHtml(data: any, title: string = 'Export'): string {
  // Create a basic HTML template
  const html = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${title}</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 20px;
          color: #333;
        }
        h1 {
          color: #0066cc;
          border-bottom: 1px solid #ddd;
          padding-bottom: 10px;
        }
        .timestamp {
          color: #666;
          font-size: 0.8em;
          margin-bottom: 20px;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 20px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .chart-container {
          margin: 20px 0;
          page-break-inside: avoid;
        }
        .footer {
          margin-top: 30px;
          border-top: 1px solid #ddd;
          padding-top: 10px;
          font-size: 0.8em;
          color: #666;
          text-align: center;
        }
        .normal { color: #28a745; }
        .warning { color: #ffc107; }
        .critical { color: #dc3545; }
      </style>
    </head>
    <body>
      <h1>${title}</h1>
      <div class="timestamp">Generated on: ${new Date().toLocaleString()}</div>
      
      ${renderData(data)}
      
      <div class="footer">
        Generated by AWS AIOps Dashboard
      </div>
    </body>
    </html>
  `;
  
  return html;
}

// Helper function to render different types of data
function renderData(data: any): string {
  if (!data) return '<p>No data available</p>';
  
  // Handle array of objects (table)
  if (Array.isArray(data) && typeof data[0] === 'object') {
    return renderTable(data);
  }
  
  // Handle simple array
  if (Array.isArray(data)) {
    return `
      <ul>
        ${data.map(item => `<li>${item}</li>`).join('')}
      </ul>
    `;
  }
  
  // Handle object
  if (typeof data === 'object') {
    return renderObject(data);
  }
  
  // Handle primitive
  return `<p>${data}</p>`;
}

// Helper function to render a table from an array of objects
function renderTable(data: any[]): string {
  if (data.length === 0) return '<p>No data available</p>';
  
  const headers = Object.keys(data[0]);
  
  return `
    <table>
      <thead>
        <tr>
          ${headers.map(header => `<th>${header}</th>`).join('')}
        </tr>
      </thead>
      <tbody>
        ${data.map(row => `
          <tr>
            ${headers.map(header => {
              const value = row[header];
              
              // Handle status with color coding
              if (header.toLowerCase() === 'status') {
                const statusClass = value?.toLowerCase() || '';
                return `<td class="${statusClass}">${value}</td>`;
              }
              
              // Handle nested objects and arrays
              if (typeof value === 'object' && value !== null) {
                return `<td>${JSON.stringify(value)}</td>`;
              }
              
              return `<td>${value}</td>`;
            }).join('')}
          </tr>
        `).join('')}
      </tbody>
    </table>
  `;
}

// Helper function to render an object
function renderObject(data: Record<string, any>): string {
  return `
    <table>
      <thead>
        <tr>
          <th>Property</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        ${Object.entries(data).map(([key, value]) => `
          <tr>
            <td>${key}</td>
            <td>${typeof value === 'object' && value !== null ? JSON.stringify(value) : value}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  `;
}
